from fastapi import FastAPI, Depends

from routers.verify import verify_token
from routers import auth, ticket

description = """
Данное api для сервиса работы с микросервисом Ticket компании 1440.test.
Тут используется в качестве авторизации в системе discord Oauth 2.0 с учетом на то, что 
он привязан к аккаунту пользователя. 

Причина такого решения в том, что доступа к тестовой среде авторизации пользователя самой компании мне не предоставлен,
поэтому решением стало использовать пример реализации OAuth 2.0 от Discord.

# Техническое задание
 - Разработка микросервиса для автоматизации процесса обработки заявок

## Цель
Разработать микросервис, который будет автоматизировать процесс обработки заявок от сотрудников компании на различные внутренние сервисы.

## Требования к реализации

1. Язык программирования: Python 3.9+
2. Фреймворк: FastAPI
3. База данных: PostgreSQL
4. Система кэширования: Redis
5. Контейнеризация: Docker

## Функциональные требования

1. Создание REST API для:
   - Подачи новой заявки
   - Получения статуса заявки
   - Обновления статуса заявки
   - Получения списка всех заявок с возможностью фильтрации

2. Интеграция с существующей системой аутентификации компании (OAuth 2.0)

3. Реализация асинхронной обработки заявок с использованием очередей

4. Логирование всех действий с заявками

5. Создание механизма уведомлений (email, Slack) при изменении статуса заявки

## Нефункциональные требования

1. Покрытие кода unit-тестами (не менее 80%)
2. Документация API (использовать Swagger)
3. Масштабируемость: сервис должен поддерживать обработку не менее 1000 заявок в минуту
4. Отказоустойчивость: реализовать механизм повторных попыток при сбоях

## Дополнительные задачи

1. Настроить CI/CD pipeline для автоматического развертывания сервиса
2. Реализовать систему мониторинга работоспособности сервиса
3. Подготовить скрипты для миграции данных из текущей системы

## Ожидаемые результаты

1. Исходный код проекта в репозитории Git
2. Документация по развертыванию и использованию сервиса
3. Dockerfile и docker-compose.yml для локального запуска
4. Презентация с описанием архитектуры решения и основных технических решений

## Срок выполнения
5 рабочих дней

## Критерии оценки
- Качество и чистота кода
- Соответствие требованиям задания
- Производительность и масштабируемость решения
- Понятность документации
- Корректность работы всех заявленных функций

Удачи в выполнении задания!

"""

app = FastAPI(
    title="ticket.1440.test",
    description=description,
    summary="API предоставляет доступ к сервису по созданию и обработке заявок сотрудников 1440.test",
    version="0.0.1",
    contact={
        "name": "Иванов Андрей(aka Arefa Satellite)",
        "url": "https://t.me/arefaste",
    }
)

app.include_router(
    auth.router,
    prefix="/api/discord",
    tags=["OAuth2.0"]
)

app.include_router(
    ticket.router,
    dependencies=[Depends(verify_token)],
    prefix="/api/tickets",
    tags=["Tickets"]
)


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)


